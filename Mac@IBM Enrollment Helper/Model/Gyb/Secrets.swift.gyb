//
//  Secrets.swift
//  Mac@IBM Enrollment Helper
//
//  Created by Simone Martorelli on 8/27/20.
//  Copyright Â© 2021 IBM Inc. All rights reserved
//  SPDX-License-Identifier: Apache2.0
//
//  swiftlint:disable trailing_comma trailing_whitespace
%{
import os

def chunks(seq, size):
    return (seq[i:(i + size)] for i in range(0, len(seq), size))
    
def encode(string, cipher):
    bytes = string.encode("UTF-8")
    return [ord(bytes[i]) ^ cipher[i % len(cipher)] for i in range(0, len(bytes))]
}%

enum Secrets {
    private static let salt: [UInt8] = [
    %{ salt = [ord(byte) for byte in os.urandom(64)] }%
    % for chunk in chunks(salt, 8):
        ${"".join(["0x%02x, " % byte for byte in chunk])}
    % end
    ]

    static var jssUserAuthTest: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('TEST_JSS_AUTH'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }
    static var jssUserAuthQA: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('QA_JSS_AUTH'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }
    static var jssUserAuthProd: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('PROD_JSS_AUTH'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }
    static var artifactoryAPIKey: String {
        let encoded: [UInt8] = [
        % for chunk in chunks(encode(os.environ.get('ARTIFACTORY_API_KEY'), salt), 8):
            ${"".join(["0x%02x, " % byte for byte in chunk])}
        % end
        ]

        return decode(encoded, cipher: salt)
    }
    
    static func decode(_ encoded: [UInt8], cipher: [UInt8]) -> String {
        String(decoding: encoded.enumerated().map { (offset, element) in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }
}
